import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:intl/intl.dart';
import 'package:roofgrid_uk/app/results/models/saved_result.dart';
import 'package:roofgrid_uk/app/results/providers/results_provider.dart';
import 'package:roofgrid_uk/screens/results/result_visualization.dart';
import 'package:roofgrid_uk/app/theme/app_theme.dart';

class ResultDetailScreen extends ConsumerWidget {
  const ResultDetailScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final result = ref.watch(selectedResultProvider);
    
    if (result == null) {
      return Scaffold(
        appBar: AppBar(title: const Text('Result Details')),
        body: const Center(child: Text('No result selected')),
      );
    }
    
    final isVertical = result.type == CalculationType.vertical;
    final dateFormat = DateFormat('dd MMMM yyyy, HH:mm');
    final formattedDate = dateFormat.format(result.timestamp);
    
    return Scaffold(
      appBar: AppBar(
        title: Text(result.projectName),
        actions: [
          IconButton(
            icon: const Icon(Icons.share),
            onPressed: () {
              // TODO: Show export options
            },
            tooltip: 'Export',
          ),
          IconButton(
            icon: const Icon(Icons.edit),
            onPressed: () {
              // TODO: Navigate to edit screen
            },
            tooltip: 'Edit',
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Summary banner
            Container(
              padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 24),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: isVertical 
                    ? [Colors.blue.shade700, Colors.blue.shade500]
                    : [Colors.teal.shade700, Colors.teal.shade500],
                ),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    isVertical ? 'Vertical Calculation' : 'Horizontal Calculation',
                    style: const TextStyle(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 18,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'Created on $formattedDate',
                    style: const TextStyle(
                      color: Colors.white70,
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ),
            
            // Visualization
            Container(
              height: 220,
              padding: const EdgeInsets.all(16),
              child: Card(
                elevation: 2,
                child: ResultVisualization(result: result),
              ),
            ),
            
            // Details section
            Padding(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildSectionTitle(context, 'Tile Information'),
                  _buildInfoCard(
                    context,
                    title: 'Tile Details',
                    content: Column(
                      children: [
                        _infoRow('Name', result.tile['name']?.toString() ?? 'N/A'),
                        _infoRow('Type', result.tile['materialType']?.toString() ?? 'N/A'),
                        if (result.tile['tileCoverWidth'] != null)
                          _infoRow('Cover Width', '${result.tile['tileCoverWidth']} mm'),
                        if (result.tile['slateTileHeight'] != null)
                          _infoRow('Height', '${result.tile['slateTileHeight']} mm'),
                      ],
                    ),
                  ),
                  
                  const SizedBox(height: 24),
                  _buildSectionTitle(context, 'Inputs'),
                  
                  // Inputs card (dynamic based on calculation type)
                  _buildInputsCard(context, result),
                  
                  const SizedBox(height: 24),
                  _buildSectionTitle(context, 'Results'),
                  
                  // Results card (dynamic based on calculation type)
                  _buildResultsCard(context, result),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildSectionTitle(BuildContext context, String title) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 12),
      child: Text(
        title,
        style: Theme.of(context).textTheme.titleMedium?.copyWith(
          fontWeight: FontWeight.bold,
          color: Theme.of(context).colorScheme.primary,
        ),
      ),
    );
  }
  
  Widget _buildInfoCard(BuildContext context, {required String title, required Widget content}) {
    return Card(
      elevation: 1,
      margin: EdgeInsets.zero,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: Theme.of(context).textTheme.titleSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 8),
            const Divider(),
            const SizedBox(height: 8),
            content,
          ],
        ),
      ),
    );
  }
  
  Widget _infoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            flex: 2,
            child: Text(
              '$label:',
              style: const TextStyle(fontWeight: FontWeight.w500),
            ),
          ),
          Expanded(
            flex: 3,
            child: Text(value),
          ),
        ],
      ),
    );
  }
  
  Widget _buildInputsCard(BuildContext context, SavedResult result) {
    final isVertical = result.type == CalculationType.vertical;
    final inputs = result.inputs;
    
    List<Widget> inputRows = [];
    
    // Common settings
    if (inputs['gutterOverhang'] != null) {
      inputRows.add(_infoRow('Gutter Overhang', '${inputs['gutterOverhang']} mm'));
    }
    
    if (inputs['useDryRidge'] != null) {
      inputRows.add(_infoRow('Dry Ridge', inputs['useDryRidge'] == 'YES' ? 'Yes' : 'No'));
    }
    
    // Vertical specific
    if (isVertical && inputs['rafterHeights'] != null) {
      final rafters = inputs['rafterHeights'] as List<dynamic>;
      for (int i = 0; i < rafters.length; i++) {
        final rafter = rafters[i];
        inputRows.add(_infoRow(
          rafter['label'] ?? 'Rafter ${i + 1}', 
          '${rafter['value']} mm'
        ));
      }
    }
    
    // Horizontal specific
    if (!isVertical) {
      if (inputs['widths'] != null) {
        final widths = inputs['widths'] as List<dynamic>;
        for (int i = 0; i < widths.length; i++) {
          final width = widths[i];
          inputRows.add(_infoRow(
            width['label'] ?? 'Width ${i + 1}', 
            '${width['value']} mm'
          ));
        }
      }
      
      if (inputs['useDryVerge'] != null) {
        inputRows.add(_infoRow('Dry Verge', inputs['useDryVerge'] == 'YES' ? 'Yes' : 'No'));
      }
      
      if (inputs['abutmentSide'] != null) {
        inputRows.add(_infoRow('Abutment Side', inputs['abutmentSide']));
      }
      
      if (inputs['useLHTile'] != null) {
        inputRows.add(_infoRow('Left Hand Tile', inputs['useLHTile'] == 'YES' ? 'Yes' : 'No'));
      }
    }
    
    return _buildInfoCard(
      context,
      title: 'Calculation Inputs',
      content: Column(children: inputRows),
    );
  }
  
  Widget _buildResultsCard(BuildContext context, SavedResult result) {
    final isVertical = result.type == CalculationType.vertical;
    final outputs = result.outputs;
    
    List<Widget> outputRows = [];
    
    // Common outputs
    if (outputs['solution'] != null) {
      outputRows.add(_infoRow('Solution Type', outputs['solution']));
    }
    
    // Vertical specific
    if (isVertical) {
      if (outputs['totalCourses'] != null) {
        outputRows.add(_infoRow('Total Courses', '${outputs['totalCourses']}'));
      }
      
      if (outputs['ridgeOffset'] != null) {
        outputRows.add(_infoRow('Ridge Offset', '${outputs['ridgeOffset']} mm'));
      }
      
      if (outputs['eaveBatten'] != null) {
        outputRows.add(_infoRow('Eave Batten', '${outputs['eaveBatten']} mm'));
      }
      
      if (outputs['firstBatten'] != null) {
        outputRows.add(_infoRow('First Batten', '${outputs['firstBatten']} mm'));
      }
      
      if (outputs['cutCourse'] != null) {
        outputRows.add(_infoRow('Cut Course', '${outputs['cutCourse']} mm'));
      }
      
      if (outputs['gauge'] != null) {
        outputRows.add(_infoRow('Gauge', outputs['gauge']));
      }
      
      if (outputs['splitGauge'] != null) {
        outputRows.add(_infoRow('Split Gauge', outputs['splitGauge']));
      }
    }
    
    // Horizontal specific
    else {
      if (outputs['newWidth'] != null) {
        outputRows.add(_infoRow('New Width', '${outputs['newWidth']} mm'));
      }
      
      if (outputs['lhOverhang'] != null) {
        outputRows.add(_infoRow('LH Overhang', '${outputs['lhOverhang']} mm'));
      }
      
      if (outputs['rhOverhang'] != null) {
        outputRows.add(_infoRow('RH Overhang', '${outputs['rhOverhang']} mm'));
      }
      
      if (outputs['cutTile'] != null) {
        outputRows.add(_infoRow('Cut Tile', '${outputs['cutTile']} mm'));
      }
      
      if (outputs['firstMark'] != null) {
        outputRows.add(_infoRow('First Mark', '${outputs['firstMark']} mm'));
      }
      
      if (outputs['secondMark'] != null) {
        outputRows.add(_infoRow('Second Mark', '${outputs['secondMark']} mm'));
      }
      
      if (outputs['marks'] != null) {
        outputRows.add(_infoRow('Marks', outputs['marks']));
      }
      
      if (outputs['splitMarks'] != null) {
        outputRows.add(_infoRow('Split Marks', outputs['splitMarks']));
      }
    }
    
    // Warning if any
    if (outputs['warning'] != null) {
      outputRows.add(const SizedBox(height: 8));
      outputRows.add(Container(
        padding: const EdgeInsets.all(8),
        decoration: BoxDecoration(
          color: Colors.amber.shade50,
          borderRadius: BorderRadius.circular(4),
          border: Border.all(color: Colors.amber),
        ),
        child: Row(
          children: [
            const Icon(Icons.warning_amber, color: Colors.amber, size: 20),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                outputs['warning'],
                style: TextStyle(color: Colors.amber.shade900),
              ),
            ),
          ],
        ),
      ));
    }
    
    return _buildInfoCard(
      context,
      title: 'Calculation Results',
      content: Column(children: outputRows),
    );
  }
}